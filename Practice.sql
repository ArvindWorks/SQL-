--1) WAQ TO FIND THE NUMBER OF CALLS BETWEEN TWO PERSONS

CREATE TABLE CALLS (FROM_ID INT, TO_ID INT, DURATION INT);

INSERT INTO CALLS VALUES (1,2,59), (2,1,11), (1,3,20), (3,4,100), (3,4,200), (3,4,200), (4,3,499);

SELECT LEAST(FROM_ID, TO_ID) P1,
       GREATEST(FROM_ID, TO_ID) P2,
       COUNT(*) CALL_COUNT,
       SUM(DURATION) DURATION
FROM CALLS
GROUP BY LEAST(FROM_ID, TO_ID),
         GREATEST(FROM_ID, TO_ID);

-- ANOTHER WAY --------------------------------

SELECT MAX(CASE WHEN FROM_ID < TO_ID THEN FROM_ID ELSE TO_ID END) P1,
       MAX(CASE WHEN FROM_ID > TO_ID THEN FROM_ID ELSE TO_ID END) P2,
       COUNT(*) CALL_COUNT,
       SUM(DURATION) DURATION
FROM CALLS
GROUP BY CASE WHEN FROM_ID < TO_ID THEN FROM_ID ELSE TO_ID END,
         CASE WHEN FROM_ID > TO_ID THEN FROM_ID ELSE TO_ID END;

----------------------------------------------------------------------------------------------------------------------------------------------------------------
--2) WAQ TO FIND THE CONSECUTIVE SEATS WHERE 1 IS AVAILABLE AND 0 IS BOOKED

CREATE TABLE CINEMA (
    SEAT_ID INT PRIMARY KEY,
    FREE INT
);

DELETE FROM CINEMA;

INSERT INTO CINEMA (SEAT_ID, FREE) VALUES (1, 1);
INSERT INTO CINEMA (SEAT_ID, FREE) VALUES (2, 0);
INSERT INTO CINEMA (SEAT_ID, FREE) VALUES (3, 1);
INSERT INTO CINEMA (SEAT_ID, FREE) VALUES (4, 1);
INSERT INTO CINEMA (SEAT_ID, FREE) VALUES (5, 1);
INSERT INTO CINEMA (SEAT_ID, FREE) VALUES (6, 0);
INSERT INTO CINEMA (SEAT_ID, FREE) VALUES (7, 1);
INSERT INTO CINEMA (SEAT_ID, FREE) VALUES (8, 1);
INSERT INTO CINEMA (SEAT_ID, FREE) VALUES (9, 0);
INSERT INTO CINEMA (SEAT_ID, FREE) VALUES (10, 1);
INSERT INTO CINEMA (SEAT_ID, FREE) VALUES (11, 0);
INSERT INTO CINEMA (SEAT_ID, FREE) VALUES (12, 1);
INSERT INTO CINEMA (SEAT_ID, FREE) VALUES (13, 0);
INSERT INTO CINEMA (SEAT_ID, FREE) VALUES (14, 1);
INSERT INTO CINEMA (SEAT_ID, FREE) VALUES (15, 1);
INSERT INTO CINEMA (SEAT_ID, FREE) VALUES (16, 0);
INSERT INTO CINEMA (SEAT_ID, FREE) VALUES (17, 1);
INSERT INTO CINEMA (SEAT_ID, FREE) VALUES (18, 1);
INSERT INTO CINEMA (SEAT_ID, FREE) VALUES (19, 1);
INSERT INTO CINEMA (SEAT_ID, FREE) VALUES (20, 1);

-- METHOD 1

WITH CTE AS (
    SELECT *,
           ROW_NUMBER() OVER (ORDER BY SEAT_ID) RN,            -- GENERATING ROW NUMBER
           SEAT_ID - ROW_NUMBER() OVER (ORDER BY SEAT_ID) GRP  -- CREATING GROUP BY SUBTRACTING SEAT_ID FROM ROW NUMBER
    FROM CINEMA
    WHERE FREE = 1   -- FILTERING FOR ONLY AVAILABLE ONES
),
B AS (
    SELECT SEAT_ID, GRP, COUNT(*) OVER (PARTITION BY GRP) CT 
    FROM CTE  -- COUNTING HOW MANY SEATS ARE THERE IN GROUP
)
SELECT SEAT_ID 
FROM B 
WHERE CT > 1;

-- METHOD 2 USING SELF JOIN

WITH CTE AS (
    SELECT C1.SEAT_ID S1, C2.SEAT_ID S2 
    FROM CINEMA C1 
    JOIN CINEMA C2 
    ON C1.SEAT_ID + 1 = C2.SEAT_ID 
    WHERE C1.FREE = 1 AND C2.FREE = 1  -- JOINING ON SEAT_ID CONSECUTIVE SEAT_ID BY FILTERING ONLY FREE SEATS
)
SELECT S1 SEAT_ID 
FROM CTE 
UNION 
SELECT S2 SEAT_ID 
FROM CTE;

-- METHOD 3

WITH CTE AS (
    SELECT *,
           LAG(FREE) OVER (ORDER BY SEAT_ID) PREV,
           LEAD(FREE) OVER (ORDER BY SEAT_ID) NEXT 
    FROM CINEMA
)
SELECT SEAT_ID 
FROM CTE 
WHERE FREE = 1 AND (PREV = 1 OR NEXT = 1);
------------------------------------------------------------------------------------------------------------------------------------------------------------
---------3)  FIND DEPARTMENT WISE MINIMUM SALARY EMPLOYEE NAME AND MAXIMUM SALARY EMPLOYEE NAME

CREATE TABLE EMPS_TBL (
    EMP_NAME VARCHAR(50), 
    DEPT_ID INT, 
    SALARY INT
);

INSERT INTO EMPS_TBL VALUES 
    ('SIVA', 1, 30000), 
    ('RAVI', 2, 40000), 
    ('PRASAD', 1, 50000), 
    ('SAI', 2, 20000), 
    ('ANNA', 2, 10000);

SELECT * FROM EMPS_TBL;

SELECT DEPT_ID,
       MAX(CASE WHEN RK = 1 THEN EMP_NAME END) HIGH_E,
       MAX(CASE WHEN RKK = 1 THEN EMP_NAME END) LOW_E
FROM (
    SELECT DEPT_ID, 
           EMP_NAME, 
           SALARY,
           RANK() OVER (PARTITION BY DEPT_ID ORDER BY SALARY DESC) RK,
           RANK() OVER (PARTITION BY DEPT_ID ORDER BY SALARY) RKK
    FROM EMPS_TBL
) AB
GROUP BY DEPT_ID;
-----------------------------------------------------------------------------------------------------------------------------------------------------------
-- WAQ TO DERIVE THE STATUS OF THE PERFORMANCE OF THE EMPLOYEE. IF PERSON IS HAVING HIGHEST SALARY IN THEIR DEPT THEN PERSON IS TOP PERFORMER
--ELSE IF DIFF BETWEEN PERSON SALARY AND MAX SALRY OF DE[T IS < 10% THEN AVG PERFORMER ELSE WORST PERFORMER
--CREATE TABLE AND INSERT DATA INTO EMPLOYEES

CREATE TABLE EMPLOYEES (
    EMPLOYEEID INT PRIMARY KEY,
    NAME VARCHAR(50),
    DEPARTMENT VARCHAR(50),
    SALARY DECIMAL(10, 2)
);

INSERT INTO EMPLOYEES (EMPLOYEEID, NAME, DEPARTMENT, SALARY) VALUES 
    (1, 'ALICE', 'SALES', 5000.00),
    (2, 'BOB', 'SALES', 6000.00),
    (3, 'CHARLIE', 'SALES', 5500.00),
    (4, 'DAVID', 'MARKETING', 6500.00),
    (5, 'EVA', 'MARKETING', 7000.00),
    (6, 'FRANK', 'MARKETING', 6200.00),
    (7, 'GRACE', 'IT', 7500.00),
    (8, 'HANK', 'IT', 7200.00);

-- CTE TO CLASSIFY EMPLOYEES BASED ON SALARY AND RANK

WITH CTE AS (
    SELECT *, 
           DENSE_RANK() OVER (PARTITION BY DEPARTMENT ORDER BY SALARY DESC) RK,
           MAX(SALARY) OVER (PARTITION BY DEPARTMENT) MAX_SAL  -- HERE I AM CALCULATING MAX SALARY DEPT WISE USING WINDOW FUNCTION
    FROM EMPLOYEES
)

SELECT EMPLOYEEID, 
       NAME, 
       DEPARTMENT, 
       SALARY,
       CASE 
           WHEN RK = 1 THEN 'TOP PERFORMER'
           WHEN (MAX_SAL - SALARY) < SALARY * 0.1 THEN 'AVG' -- HERE CHECKING IF THE DIFF BW MAX SAL AND SAL IS LESS THAN 10 % OF SALARY OR NOT
           ELSE 'WORST' 
       END EMP_RANK
FROM CTE;

--- -------ANOTHER WAY

WITH CTE AS(
              SELECT *,
              DENSE_RANK() OVER(PARTITION BY DEPARTMENT ORDER BY SALARY DESC) RK,
              MAX(SALARY)OVER(PARTITION BY DEPARTMENT ORDER BY SALARY DESC) MAX_SAL
              FROM EMPLOYEES
            )

SELECT *,((MAX_SAL - SALARY)/SALARY)*100,  -- HERE I AM CALCULATING WHAT PERCENTAGE DIFFERENCE OF SALARY COMPARE TO MAX SALARY
CASE WHEN RK = 1 THEN 'TOP '
WHEN ((MAX_SAL - SALARY)/SALARY)*100 < 10 THEN 'AVG'
ELSE 'WORST' END STATUS FROM CTE
